node room_presence(presence: bool) returns (has_presence: int)
let
    automaton

	    state Empty do
	    	has_presence = 0; 
	    unless presence then Occupied
	    
	    state Occupied do
	    	has_presence = 1;
	    unless presence then Empty

    end 
tel

node room_lamp(turn_on_l, c1_l, c2_l: bool) returns (is_on_l: int)
let
	automaton
		state Off do
			is_on_l = 0;
		unless (turn_on_l & c1_l) or not c2_l then On

		state On do
			is_on_l = 1;
		unless (turn_on_l & c1_l) or not c2_l then Off
	end
tel

node supervisor(pres_user1, pres_user2, pres_user3, turn_on_l1, turn_on_l2, turn_on_l3: bool)
	
	returns (has_pres_user1, has_pres_user2, has_pres_user3, is_on_l1, is_on_l2, is_on_l3 : int;)

    contract
    	var rule1,rule2, rule3, rule4: bool; presents, t_lamps: int;

    let
    	rule1 = not (presents < 1) or (t_lamps = 0);
    	rule2 = not (has_pres_user1 = 1) or (is_on_l1 = 1);
    	rule3 = not (has_pres_user2 = 1) or (is_on_l2 = 1);
    	rule4 = not (has_pres_user3 = 1) or (is_on_l3 = 1);
		presents = has_pres_user1 + has_pres_user2 + has_pres_user3;
		t_lamps = is_on_l1 + is_on_l2 + is_on_l3;

    tel

    enforce (rule1 & rule2 & rule3 & rule4)
		 with (c_l1_1, c_l2_1, c_l3_1, c_l1_2, c_l2_2, c_l3_2 : bool) 

	let
		has_pres_user1 = inlined room_presence(pres_user1);
		has_pres_user2 = inlined room_presence(pres_user2);
		has_pres_user3 = inlined room_presence(pres_user3);
		is_on_l1 = inlined room_lamp(turn_on_l1,c_l1_1, c_l1_2);
		is_on_l2 = inlined room_lamp(turn_on_l2,c_l2_1, c_l2_2);
		is_on_l3 = inlined room_lamp(turn_on_l3,c_l3_1, c_l3_2);
	tel
